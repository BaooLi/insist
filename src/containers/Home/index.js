import React, {Component} from 'react';import {Route, Redirect, withRouter, Switch} from "react-router-dom";import Tab from '../../components/Tab'import Course from '../Course/index'import Profile from '../Profile/index'import {CSSTransition, TransitionGroup} from 'react-transition-group'import ReactEcharts from 'echarts-for-react';import './index.less' function generateData () {    let arr =[];    for (let i =0;i<20;i++) {        arr.push({key:`事实表${i}`,value:i})    }    return arr; }let data =generateData();export default class Home extends Component {    state={        tableData:[]    }  componentDidMount() {      this.initGo()      // this.initDiagram()  }    allowDrop =(ev)=>{        ev.preventDefault();    }    drag=(ev)=> {        ev.dataTransfer.setData("Text",ev.target.innerText);    }    drop=(ev)=> {        ev.preventDefault();        var content=ev.dataTransfer.getData("Text");        // ev.target.appendChild(document.getElementById(content));        this.initDiagram(content)    }    initDiagram=(content)=>{      var $ = go.GraphObject.make;      var myDiagram = $(go.Diagram, "myDiagramDiv",              {                  initialContentAlignment: go.Spot.Center, // center Diagram contents                  "undoManager.isEnabled": true // enable Ctrl-Z to undo and Ctrl-Y to redo              });        myDiagram.add(            $(go.Part, "Auto",                $(go.Shape, { fill: "white", stroke: "gray", strokeWidth: 3 }),                $(go.Panel, "Table",                    $(go.TextBlock, "事实表1",                        { row: 0, column: 1, font: "bold 10pt sans-serif", margin: 6 }),                    // $(go.TextBlock, "Header 2",                    //     { row: 0, column: 2, font: "bold 10pt sans-serif", margin: 2 }),                    // drawn before row 1:                    $(go.RowColumnDefinition, { row: 1, separatorStrokeWidth: 1.5, separatorStroke: "black" }),                    // drawn before column 1:                    $(go.RowColumnDefinition, { column: 1, separatorStrokeWidth: 1.5, separatorStroke: "black" }),                    // $(go.TextBlock, "One", { row: 1, column: 0, stroke: "green", margin: 2 }),                    $(go.TextBlock, "字段1", { row: 1, column: 1, margin: 5 }),                    // $(go.TextBlock, "Two", { row: 2, column: 0, stroke: "green", margin: 2 }),                    $(go.TextBlock, "字段2", { row: 2, column: 1, margin: 5 }),                    // $(go.TextBlock, "Three", { row: 3, column: 0, stroke: "green", margin: 2 }),                    $(go.TextBlock, "字段3", { row: 3, column: 1, margin: 5 }),                    $(go.TextBlock, "字段4", { row: 4, column: 1, margin: 5 }),                )            ));    }    initGo =()=> {       // if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this        var $ = go.GraphObject.make;        // var myDiagram = $(go.Diagram, "myDiagramDiv",        //     {        //         initialContentAlignment: go.Spot.Center, // center Diagram contents        //         "undoManager.isEnabled": true // enable Ctrl-Z to undo and Ctrl-Y to redo        //     });       var myDiagram = $(go.Diagram, "myDiagramDiv",                {                    // 模型图的中心位置所在坐标                    initialContentAlignment: go.Spot.Center,                    // "PartResized": function(e) {                    //     var node = e.subject;                    //     var scroller = node.findObject("SCROLLER");                    //     if (scroller !== null) scroller._updateScrollBar(scroller.findObject("TABLE"));                    // }                });        myDiagram.nodeTemplate = $(go.Node, "Vertical",                {                    selectionObjectName: "SCROLLER",                    resizable: true, resizeObjectName: "SCROLLER",                    portSpreading: go.Node.SpreadingNone                },                new go.Binding("location").makeTwoWay(),                $(go.TextBlock,                    { font: "bold 14px sans-serif" },                    new go.Binding("text", "key")),                $(go.Panel, "Auto",                    $(go.Shape, { fill: "white" }),                    $('ScrollingTable',                        {                            name: "SCROLLER",                            desiredSize: new go.Size(NaN, 60),  // fixed width                            stretch: go.GraphObject.Fill,       // but stretches vertically                            defaultColumnSeparatorStroke: "gray",                            defaultColumnSeparatorStrokeWidth: 0.5                        },                        new go.Binding("TABLE.itemArray", "items"),                        new go.Binding("TABLE.column", "left", function(left) { return left ? 2 : 0; }),                        new go.Binding("desiredSize", "size").makeTwoWay(),                        {                            "TABLE.itemTemplate":                                $(go.Panel, "TableRow",                                    {                                        defaultStretch: go.GraphObject.Horizontal,                                        fromSpot: go.Spot.LeftRightSides, toSpot: go.Spot.LeftRightSides,                                        fromLinkable: true, toLinkable: true                                    },                                    new go.Binding("portId", "name"),                                    $(go.TextBlock, { column: 0 }, new go.Binding("text", "name")),                                    $(go.TextBlock, { column: 1 }, new go.Binding("text", "value"))                                ),                            "TABLE.defaultColumnSeparatorStroke": "gray",                            "TABLE.defaultColumnSeparatorStrokeWidth": 0.5,                            "TABLE.defaultRowSeparatorStroke": "gray",                            "TABLE.defaultRowSeparatorStrokeWidth": 0.5,                            "TABLE.defaultSeparatorPadding": new go.Margin(1, 3, 0, 3)                        }                    )                )            );        myDiagram.model = $(go.GraphLinksModel,            {                linkFromPortIdProperty: "fromPort",                linkToPortIdProperty: "toPort",                nodeDataArray: [                    {                        key: "Alpha", left: true, location: new go.Point(0, 0), size: new go.Size(100, 50),                        items:                            [                                { name: "A", value: 1 },                                { name: "B", value: 2 },                                { name: "C", value: 3 },                                { name: "D", value: 4 },                                { name: "E", value: 5 },                                { name: "F", value: 6 },                                { name: "G", value: 7 }                            ]                    },                    {                        key: "Beta", location: new go.Point(150, 0),                        items:                            [                                { name: "Aa", value: 1 },                                { name: "Bb", value: 2 },                                { name: "Cc", value: 3 },                                { name: "Dd", value: 4 },                                { name: "Ee", value: 5 },                                { name: "Ff", value: 6 },                                { name: "Gg", value: 7 },                                { name: "Hh", value: 8 },                                { name: "Ii", value: 9 },                                { name: "Jj", value: 10 },                                { name: "Kk", value: 11 },                                { name: "Ll", value: 12 },                                { name: "Mm", value: 13 },                                { name: "Nn", value: 14 }                            ]                    }                ],                linkDataArray: [                    { from: "Alpha", fromPort: "G", to: "Beta", toPort: "Aa" }                ]            });    }  render() {    return (      <div className='home_container'>          <ul className='list'>              {                  data.map((item,index)=>(                      <li onDragStart={this.drag} key={index} draggable="true">{item.key}</li>                  ))              }          </ul>          <div id="myDiagramDiv"  onDrop={this.drop} onDragOver={this.allowDrop}></div>      </div>    )  }}/*  ------------ GoJs -----------------每个Diagram都是通过数据模型（Model）来填充和确定 节点Node 的信息和 连接线Link 的所属关系的。并且我们只需要创建好Node和Link的模板以及数据模型，其他的是事情都交给gojs去处理。它会通过Model.nodeDataArray方法和GraphLinksModel.linkDataArray方法自动加载模型并构建元素。每一个Node和Link都是通过模板来描述他们的文本、形状、颜色等信息以及交互行为。位置：每个Node的位置可以使用Diagram.layout或Group.layout进行初始化设置，也可以基于交互行为进行拖拽。管理交互行为：我们也可以通过ToolManager对象来管理工具类，或者说来管理交互行为，比如说可以停止某些交互，或开启某些交互等。            每个Diagram同时也包含CommandHandler对象，它的作用是添加一些键盘命令，比如点Delete键删除元素，Ctrl+C复制、Ctrl+V粘贴、Ctrl+Z撤销等。            但是CommandHandler也是被ToolManager管理的。选中变化：在Diagram中，你可以选中Node或者Link，你会发现他们有少许的变化，比如在Node周围会增加选中框，选中Link会变色等。这些都是由Adornment对象控制的，     你还可以用它来增加提示框、右键菜单等。Diagram默认的交互行为：    选中Node或者Link，会出现蓝色选中框，Link也会变为蓝色。    使用Ctrl+鼠标左键可以选中多个元素。    在Panel中点击鼠标左键移动鼠标可以移动所有元素。    使用Ctrl+A可以选中所有元素。    选中元素，用鼠标可以拖动元素。    使用Ctrl+C/Ctrl+V可以复制粘贴元素。    使用Delete键可以删除元素。    选中多个元素，然后使用Ctrl+G可以将这些选中的元素组合成一个组。    使用Ctrl+Shift+G可以拆散组。    当元素超出Diagram时，可自动出现滚动条。    用鼠标拖拽Node边缘可以与其他Node进行连线。    选中Link，可以重新选择目标Node，即可以重新连线。Parts是一个图表对象，它继承自Panel。所以它的超类是GraphObject，因此Parts也拥有GraphObject的属性，比如GraphObject.actualBounds、GraphObject.contextMenu、GraphObject.visible。找到这段代码，特征：1. 含有字符串：'7eba17a4ca3b1a8346','78a118b7'；2. 也可能不为aw，根据具体情况来操作。a.aw=d[D.Wg("7eba17a4ca3b1a8346")][D.Wg("78a118b7")](d,D.Im,4,4);在上面代码之后，添加如下代码：a.aw=function(){return true;};*/